
==============================
NumPy Basics (Numerical Python)
==============================

NumPy is used for fast mathematical operations on arrays.

1. Importing
import numpy as np

2. Creating Arrays
a = np.array([1, 2, 3])          # 1D array
b = np.array([[1, 2], [3, 4]])   # 2D array

3. Array Properties
a.shape      # shape of array
a.ndim       # number of dimensions
a.size       # total number of elements
a.dtype      # data type of elements

4. Special Arrays
np.zeros((2, 3))       # 2x3 array of zeros
np.ones((3, 3))        # 3x3 array of ones
np.eye(3)              # identity matrix
np.arange(0, 10, 2)    # array([0, 2, 4, 6, 8])
np.linspace(0, 1, 5)   # 5 values between 0 and 1

5. Indexing & Slicing
a[0]        # first element
b[1, 0]     # row 1, col 0
a[1:3]      # slice
b[:, 1]     # second column

6. Operations
a + 1, a * 2               # element-wise
np.dot(a, b)              # dot product
np.sum(a), np.mean(a)     # aggregate functions
np.max(a), np.min(a)
np.sort(a)

7. Reshaping
a.reshape((3, 1))       # change shape
a.flatten()             # flatten to 1D

==============================
Pandas Basics
==============================

Pandas is great for data analysis using Series and DataFrames.

1. Importing
import pandas as pd

2. Creating Data Structures
s = pd.Series([1, 2, 3])   # Series (1D)
df = pd.DataFrame({
    'Name': ['Alice', 'Bob'],
    'Age': [25, 30]
})                         # DataFrame (2D)

3. Viewing Data
df.head()      # first 5 rows
df.tail(3)     # last 3 rows
df.info()      # info on data types & nulls
df.describe()  # summary stats

4. Selecting Data
df['Name']             # column
df[['Name', 'Age']]    # multiple columns
df.iloc[0]             # by index
df.loc[0]              # by label
df.iloc[0, 1]          # row 0, column 1

5. Filtering Rows
df[df['Age'] > 25]

6. Modifying Data
df['Age'] = df['Age'] + 1       # update column
df['New'] = df['Age'] * 2       # create new column
df.drop('New', axis=1)          # drop column
df.drop(0, axis=0)              # drop row

7. Handling Missing Values
df.isnull()
df.dropna()
df.fillna(0)

8. Grouping and Aggregating
df.groupby('column').mean()
df.groupby('column').sum()

9. Merging & Joining
pd.concat([df1, df2])
pd.merge(df1, df2, on='key')

10. Reading & Writing Data
df = pd.read_csv('file.csv')
df.to_csv('output.csv')

==============================
Understanding `.shape`
==============================

.shape shows the dimensions (rows, columns).

NumPy Example:
a = np.array([[1, 2, 3], [4, 5, 6]])
a.shape -> (2, 3) -> 2 rows, 3 columns

Pandas Example:
df = pd.DataFrame({
    'Name': ['Alice', 'Bob', 'Carol'],
    'Age': [25, 30, 27]
})
df.shape -> (3, 2) -> 3 rows, 2 columns

Summary:
(5,)         -> 1D array with 5 elements
(2, 3)       -> 2 rows, 3 columns
(100, 4)     -> 100 rows, 4 columns
